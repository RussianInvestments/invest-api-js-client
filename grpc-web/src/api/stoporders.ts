// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: stoporders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { MoneyValue, PriceType, Quotation, ResponseMetadata } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

/** Направление сделки стоп-заявки. */
export enum StopOrderDirection {
  /** STOP_ORDER_DIRECTION_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_DIRECTION_UNSPECIFIED = 0,
  /** STOP_ORDER_DIRECTION_BUY - Покупка. */
  STOP_ORDER_DIRECTION_BUY = 1,
  /** STOP_ORDER_DIRECTION_SELL - Продажа. */
  STOP_ORDER_DIRECTION_SELL = 2,
  UNRECOGNIZED = -1,
}

/** Тип экспирации стоп-заявке. */
export enum StopOrderExpirationType {
  /** STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED = 0,
  /** STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL - Действительно до отмены. */
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL = 1,
  /** STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE - Действительно до даты снятия. */
  STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE = 2,
  UNRECOGNIZED = -1,
}

/** Тип стоп-заявки. */
export enum StopOrderType {
  /** STOP_ORDER_TYPE_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_TYPE_UNSPECIFIED = 0,
  /** STOP_ORDER_TYPE_TAKE_PROFIT - `Take-profit`-заявка. */
  STOP_ORDER_TYPE_TAKE_PROFIT = 1,
  /** STOP_ORDER_TYPE_STOP_LOSS - `Stop-loss`-заявка. */
  STOP_ORDER_TYPE_STOP_LOSS = 2,
  /** STOP_ORDER_TYPE_STOP_LIMIT - `Stop-limit`-заявка. */
  STOP_ORDER_TYPE_STOP_LIMIT = 3,
  UNRECOGNIZED = -1,
}

/** Статус стоп-заяки. */
export enum StopOrderStatusOption {
  /** STOP_ORDER_STATUS_UNSPECIFIED - Значение не указано. */
  STOP_ORDER_STATUS_UNSPECIFIED = 0,
  /** STOP_ORDER_STATUS_ALL - Все заявки. */
  STOP_ORDER_STATUS_ALL = 1,
  /** STOP_ORDER_STATUS_ACTIVE - Активные заявки. */
  STOP_ORDER_STATUS_ACTIVE = 2,
  /** STOP_ORDER_STATUS_EXECUTED - Исполненные заявки. */
  STOP_ORDER_STATUS_EXECUTED = 3,
  /** STOP_ORDER_STATUS_CANCELED - Отменённые заявки. */
  STOP_ORDER_STATUS_CANCELED = 4,
  /** STOP_ORDER_STATUS_EXPIRED - Истёкшие заявки. */
  STOP_ORDER_STATUS_EXPIRED = 5,
  UNRECOGNIZED = -1,
}

/** Тип выставляемой заявки. */
export enum ExchangeOrderType {
  /** EXCHANGE_ORDER_TYPE_UNSPECIFIED - Значение не указано. */
  EXCHANGE_ORDER_TYPE_UNSPECIFIED = 0,
  /** EXCHANGE_ORDER_TYPE_MARKET - Заявка по рыночной цене. */
  EXCHANGE_ORDER_TYPE_MARKET = 1,
  /** EXCHANGE_ORDER_TYPE_LIMIT - Лимитная заявка. */
  EXCHANGE_ORDER_TYPE_LIMIT = 2,
  UNRECOGNIZED = -1,
}

/** Тип TakeProfit-заявки. */
export enum TakeProfitType {
  /** TAKE_PROFIT_TYPE_UNSPECIFIED - Значение не указано. */
  TAKE_PROFIT_TYPE_UNSPECIFIED = 0,
  /** TAKE_PROFIT_TYPE_REGULAR - Обычная заявка, значение по умолчанию. */
  TAKE_PROFIT_TYPE_REGULAR = 1,
  /** TAKE_PROFIT_TYPE_TRAILING - Трейлинг-стоп. */
  TAKE_PROFIT_TYPE_TRAILING = 2,
  UNRECOGNIZED = -1,
}

/** Тип параметров значений трейлинг-стопа. */
export enum TrailingValueType {
  /** TRAILING_VALUE_UNSPECIFIED - Значение не указано. */
  TRAILING_VALUE_UNSPECIFIED = 0,
  /** TRAILING_VALUE_ABSOLUTE - Абсолютное значение в единицах цены. */
  TRAILING_VALUE_ABSOLUTE = 1,
  /** TRAILING_VALUE_RELATIVE - Относительное значение в процентах. */
  TRAILING_VALUE_RELATIVE = 2,
  UNRECOGNIZED = -1,
}

/** Статус трейлинг-стопа. */
export enum TrailingStopStatus {
  /** TRAILING_STOP_UNSPECIFIED - Значение не указано. */
  TRAILING_STOP_UNSPECIFIED = 0,
  /** TRAILING_STOP_ACTIVE - Активный. */
  TRAILING_STOP_ACTIVE = 1,
  /** TRAILING_STOP_ACTIVATED - Активированный. */
  TRAILING_STOP_ACTIVATED = 2,
  UNRECOGNIZED = -1,
}

/** Запрос выставления стоп-заявки. */
export interface PostStopOrderRequest {
  /**
   * Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
   *
   * @deprecated
   */
  figi?:
    | string
    | undefined;
  /** Количество лотов. */
  quantity: number;
  /** Цена за 1 инструмент биржевой заявки, которая будет выставлена при срабатывании по достижению `stop_price`. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. */
  price?:
    | Quotation
    | undefined;
  /** Стоп-цена заявки за 1 инструмент. При достижении стоп-цены происходит активация стоп-заявки, в результате чего выставляется биржевая заявка. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. */
  stopPrice?:
    | Quotation
    | undefined;
  /** Направление операции. */
  direction: StopOrderDirection;
  /** Номер счёта. */
  accountId: string;
  /** Тип экспирации заявки. */
  expirationType: StopOrderExpirationType;
  /** Тип заявки. */
  stopOrderType: StopOrderType;
  /** Дата и время окончания действия стоп-заявки по UTC. Для `ExpirationType = GoodTillDate` заполнение обязательно, для `GoodTillCancel` игнорируется. */
  expireDate?:
    | Date
    | undefined;
  /** Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`. */
  instrumentId: string;
  /** Тип дочерней биржевой заявки для тейкпрофита. */
  exchangeOrderType: ExchangeOrderType;
  /** Подтип стоп-заявки — `TakeProfit`. */
  takeProfitType: TakeProfitType;
  /** Массив с параметрами трейлинг-стопа. */
  trailingData:
    | PostStopOrderRequest_TrailingData
    | undefined;
  /** Тип цены. */
  priceType: PriceType;
  /** Идентификатор запроса выставления поручения для целей идемпотентности в формате `UID`. Максимальная длина — 36 символов. */
  orderId: string;
}

export interface PostStopOrderRequest_TrailingData {
  /** Отступ. */
  indent:
    | Quotation
    | undefined;
  /** Тип величины отступа. */
  indentType: TrailingValueType;
  /** Размер защитного спреда. */
  spread:
    | Quotation
    | undefined;
  /** Тип величины защитного спреда. */
  spreadType: TrailingValueType;
}

/** Результат выставления стоп-заявки. */
export interface PostStopOrderResponse {
  /** Уникальный идентификатор стоп-заявки. */
  stopOrderId: string;
  /** Идентификатор ключа идемпотентности, переданный клиентом, в формате `UID`. Максимальная длина 36 — символов. */
  orderRequestId: string;
  /** Метадата. */
  responseMetadata: ResponseMetadata | undefined;
}

/** Запрос получения списка активных стоп-заявок. */
export interface GetStopOrdersRequest {
  /** Идентификатор счёта клиента. */
  accountId: string;
  /** Статус заявок. */
  status: StopOrderStatusOption;
  /** Левая граница. */
  from:
    | Date
    | undefined;
  /** Правая граница. */
  to: Date | undefined;
}

/** Список активных стоп-заявок. */
export interface GetStopOrdersResponse {
  /** Массив стоп-заявок по счёту. */
  stopOrders: StopOrder[];
}

/** Запрос отмены выставленной стоп-заявки. */
export interface CancelStopOrderRequest {
  /** Идентификатор счёта клиента. */
  accountId: string;
  /** Уникальный идентификатор стоп-заявки. */
  stopOrderId: string;
}

/** Результат отмены выставленной стоп-заявки. */
export interface CancelStopOrderResponse {
  /** Время отмены заявки по UTC. */
  time: Date | undefined;
}

/** Информация о стоп-заявке. */
export interface StopOrder {
  /** Уникальный идентификатор стоп-заявки. */
  stopOrderId: string;
  /** Запрошено лотов. */
  lotsRequested: number;
  /** FIGI-идентификатор инструмента. */
  figi: string;
  /** Направление операции. */
  direction: StopOrderDirection;
  /** Валюта стоп-заявки. */
  currency: string;
  /** Тип стоп-заявки. */
  orderType: StopOrderType;
  /** Дата и время выставления заявки по UTC. */
  createDate:
    | Date
    | undefined;
  /** Дата и время конвертации стоп-заявки в биржевую по UTC. */
  activationDateTime:
    | Date
    | undefined;
  /** Дата и время снятия заявки по UTC. */
  expirationTime:
    | Date
    | undefined;
  /** Цена заявки за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. */
  price:
    | MoneyValue
    | undefined;
  /** Цена активации стоп-заявки за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. */
  stopPrice:
    | MoneyValue
    | undefined;
  /** `instrument_uid`-идентификатор инструмента. */
  instrumentUid: string;
  /** Подтип стоп-заявки — `TakeProfit`. */
  takeProfitType: TakeProfitType;
  /** Параметры трейлинг-стопа. */
  trailingData:
    | StopOrder_TrailingData
    | undefined;
  /** Статус заявки. */
  status: StopOrderStatusOption;
  /** Тип дочерней биржевой заявки для тейкпрофита. */
  exchangeOrderType: ExchangeOrderType;
  /** Идентификатор биржевой заявки. */
  exchangeOrderId?: string | undefined;
}

export interface StopOrder_TrailingData {
  /** Отступ. */
  indent:
    | Quotation
    | undefined;
  /** Тип величины отступа. */
  indentType: TrailingValueType;
  /** Размер защитного спреда. */
  spread:
    | Quotation
    | undefined;
  /** Тип величины защитного спреда. */
  spreadType: TrailingValueType;
  /** Статус трейлинг-стопа. */
  status: TrailingStopStatus;
  /** Цена исполнения. */
  price:
    | Quotation
    | undefined;
  /** Локальный экстремум. */
  extr: Quotation | undefined;
}

function createBasePostStopOrderRequest(): PostStopOrderRequest {
  return {
    figi: undefined,
    quantity: 0,
    price: undefined,
    stopPrice: undefined,
    direction: 0,
    accountId: "",
    expirationType: 0,
    stopOrderType: 0,
    expireDate: undefined,
    instrumentId: "",
    exchangeOrderType: 0,
    takeProfitType: 0,
    trailingData: undefined,
    priceType: 0,
    orderId: "",
  };
}

export const PostStopOrderRequest: MessageFns<PostStopOrderRequest> = {
  encode(message: PostStopOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.figi !== undefined) {
      writer.uint32(10).string(message.figi);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int64(message.quantity);
    }
    if (message.price !== undefined) {
      Quotation.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.stopPrice !== undefined) {
      Quotation.encode(message.stopPrice, writer.uint32(34).fork()).join();
    }
    if (message.direction !== 0) {
      writer.uint32(40).int32(message.direction);
    }
    if (message.accountId !== "") {
      writer.uint32(50).string(message.accountId);
    }
    if (message.expirationType !== 0) {
      writer.uint32(56).int32(message.expirationType);
    }
    if (message.stopOrderType !== 0) {
      writer.uint32(64).int32(message.stopOrderType);
    }
    if (message.expireDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expireDate), writer.uint32(74).fork()).join();
    }
    if (message.instrumentId !== "") {
      writer.uint32(82).string(message.instrumentId);
    }
    if (message.exchangeOrderType !== 0) {
      writer.uint32(88).int32(message.exchangeOrderType);
    }
    if (message.takeProfitType !== 0) {
      writer.uint32(96).int32(message.takeProfitType);
    }
    if (message.trailingData !== undefined) {
      PostStopOrderRequest_TrailingData.encode(message.trailingData, writer.uint32(106).fork()).join();
    }
    if (message.priceType !== 0) {
      writer.uint32(112).int32(message.priceType);
    }
    if (message.orderId !== "") {
      writer.uint32(122).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostStopOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostStopOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.figi = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stopPrice = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expirationType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.stopOrderType = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.expireDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.instrumentId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.exchangeOrderType = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.takeProfitType = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.trailingData = PostStopOrderRequest_TrailingData.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.priceType = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PostStopOrderRequest>): PostStopOrderRequest {
    return PostStopOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostStopOrderRequest>): PostStopOrderRequest {
    const message = createBasePostStopOrderRequest();
    message.figi = object.figi ?? undefined;
    message.quantity = object.quantity ?? 0;
    message.price = (object.price !== undefined && object.price !== null)
      ? Quotation.fromPartial(object.price)
      : undefined;
    message.stopPrice = (object.stopPrice !== undefined && object.stopPrice !== null)
      ? Quotation.fromPartial(object.stopPrice)
      : undefined;
    message.direction = object.direction ?? 0;
    message.accountId = object.accountId ?? "";
    message.expirationType = object.expirationType ?? 0;
    message.stopOrderType = object.stopOrderType ?? 0;
    message.expireDate = object.expireDate ?? undefined;
    message.instrumentId = object.instrumentId ?? "";
    message.exchangeOrderType = object.exchangeOrderType ?? 0;
    message.takeProfitType = object.takeProfitType ?? 0;
    message.trailingData = (object.trailingData !== undefined && object.trailingData !== null)
      ? PostStopOrderRequest_TrailingData.fromPartial(object.trailingData)
      : undefined;
    message.priceType = object.priceType ?? 0;
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBasePostStopOrderRequest_TrailingData(): PostStopOrderRequest_TrailingData {
  return { indent: undefined, indentType: 0, spread: undefined, spreadType: 0 };
}

export const PostStopOrderRequest_TrailingData: MessageFns<PostStopOrderRequest_TrailingData> = {
  encode(message: PostStopOrderRequest_TrailingData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indent !== undefined) {
      Quotation.encode(message.indent, writer.uint32(10).fork()).join();
    }
    if (message.indentType !== 0) {
      writer.uint32(16).int32(message.indentType);
    }
    if (message.spread !== undefined) {
      Quotation.encode(message.spread, writer.uint32(26).fork()).join();
    }
    if (message.spreadType !== 0) {
      writer.uint32(32).int32(message.spreadType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostStopOrderRequest_TrailingData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostStopOrderRequest_TrailingData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.indent = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.indentType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.spread = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.spreadType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PostStopOrderRequest_TrailingData>): PostStopOrderRequest_TrailingData {
    return PostStopOrderRequest_TrailingData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostStopOrderRequest_TrailingData>): PostStopOrderRequest_TrailingData {
    const message = createBasePostStopOrderRequest_TrailingData();
    message.indent = (object.indent !== undefined && object.indent !== null)
      ? Quotation.fromPartial(object.indent)
      : undefined;
    message.indentType = object.indentType ?? 0;
    message.spread = (object.spread !== undefined && object.spread !== null)
      ? Quotation.fromPartial(object.spread)
      : undefined;
    message.spreadType = object.spreadType ?? 0;
    return message;
  },
};

function createBasePostStopOrderResponse(): PostStopOrderResponse {
  return { stopOrderId: "", orderRequestId: "", responseMetadata: undefined };
}

export const PostStopOrderResponse: MessageFns<PostStopOrderResponse> = {
  encode(message: PostStopOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stopOrderId !== "") {
      writer.uint32(10).string(message.stopOrderId);
    }
    if (message.orderRequestId !== "") {
      writer.uint32(18).string(message.orderRequestId);
    }
    if (message.responseMetadata !== undefined) {
      ResponseMetadata.encode(message.responseMetadata, writer.uint32(2034).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostStopOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostStopOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderRequestId = reader.string();
          continue;
        }
        case 254: {
          if (tag !== 2034) {
            break;
          }

          message.responseMetadata = ResponseMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PostStopOrderResponse>): PostStopOrderResponse {
    return PostStopOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PostStopOrderResponse>): PostStopOrderResponse {
    const message = createBasePostStopOrderResponse();
    message.stopOrderId = object.stopOrderId ?? "";
    message.orderRequestId = object.orderRequestId ?? "";
    message.responseMetadata = (object.responseMetadata !== undefined && object.responseMetadata !== null)
      ? ResponseMetadata.fromPartial(object.responseMetadata)
      : undefined;
    return message;
  },
};

function createBaseGetStopOrdersRequest(): GetStopOrdersRequest {
  return { accountId: "", status: 0, from: undefined, to: undefined };
}

export const GetStopOrdersRequest: MessageFns<GetStopOrdersRequest> = {
  encode(message: GetStopOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.from !== undefined) {
      Timestamp.encode(toTimestamp(message.from), writer.uint32(26).fork()).join();
    }
    if (message.to !== undefined) {
      Timestamp.encode(toTimestamp(message.to), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStopOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStopOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.to = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetStopOrdersRequest>): GetStopOrdersRequest {
    return GetStopOrdersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStopOrdersRequest>): GetStopOrdersRequest {
    const message = createBaseGetStopOrdersRequest();
    message.accountId = object.accountId ?? "";
    message.status = object.status ?? 0;
    message.from = object.from ?? undefined;
    message.to = object.to ?? undefined;
    return message;
  },
};

function createBaseGetStopOrdersResponse(): GetStopOrdersResponse {
  return { stopOrders: [] };
}

export const GetStopOrdersResponse: MessageFns<GetStopOrdersResponse> = {
  encode(message: GetStopOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stopOrders) {
      StopOrder.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStopOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStopOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrders.push(StopOrder.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetStopOrdersResponse>): GetStopOrdersResponse {
    return GetStopOrdersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStopOrdersResponse>): GetStopOrdersResponse {
    const message = createBaseGetStopOrdersResponse();
    message.stopOrders = object.stopOrders?.map((e) => StopOrder.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCancelStopOrderRequest(): CancelStopOrderRequest {
  return { accountId: "", stopOrderId: "" };
}

export const CancelStopOrderRequest: MessageFns<CancelStopOrderRequest> = {
  encode(message: CancelStopOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.stopOrderId !== "") {
      writer.uint32(18).string(message.stopOrderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStopOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStopOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CancelStopOrderRequest>): CancelStopOrderRequest {
    return CancelStopOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelStopOrderRequest>): CancelStopOrderRequest {
    const message = createBaseCancelStopOrderRequest();
    message.accountId = object.accountId ?? "";
    message.stopOrderId = object.stopOrderId ?? "";
    return message;
  },
};

function createBaseCancelStopOrderResponse(): CancelStopOrderResponse {
  return { time: undefined };
}

export const CancelStopOrderResponse: MessageFns<CancelStopOrderResponse> = {
  encode(message: CancelStopOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.time !== undefined) {
      Timestamp.encode(toTimestamp(message.time), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStopOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStopOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CancelStopOrderResponse>): CancelStopOrderResponse {
    return CancelStopOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelStopOrderResponse>): CancelStopOrderResponse {
    const message = createBaseCancelStopOrderResponse();
    message.time = object.time ?? undefined;
    return message;
  },
};

function createBaseStopOrder(): StopOrder {
  return {
    stopOrderId: "",
    lotsRequested: 0,
    figi: "",
    direction: 0,
    currency: "",
    orderType: 0,
    createDate: undefined,
    activationDateTime: undefined,
    expirationTime: undefined,
    price: undefined,
    stopPrice: undefined,
    instrumentUid: "",
    takeProfitType: 0,
    trailingData: undefined,
    status: 0,
    exchangeOrderType: 0,
    exchangeOrderId: undefined,
  };
}

export const StopOrder: MessageFns<StopOrder> = {
  encode(message: StopOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stopOrderId !== "") {
      writer.uint32(10).string(message.stopOrderId);
    }
    if (message.lotsRequested !== 0) {
      writer.uint32(16).int64(message.lotsRequested);
    }
    if (message.figi !== "") {
      writer.uint32(26).string(message.figi);
    }
    if (message.direction !== 0) {
      writer.uint32(32).int32(message.direction);
    }
    if (message.currency !== "") {
      writer.uint32(42).string(message.currency);
    }
    if (message.orderType !== 0) {
      writer.uint32(48).int32(message.orderType);
    }
    if (message.createDate !== undefined) {
      Timestamp.encode(toTimestamp(message.createDate), writer.uint32(58).fork()).join();
    }
    if (message.activationDateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.activationDateTime), writer.uint32(66).fork()).join();
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(74).fork()).join();
    }
    if (message.price !== undefined) {
      MoneyValue.encode(message.price, writer.uint32(82).fork()).join();
    }
    if (message.stopPrice !== undefined) {
      MoneyValue.encode(message.stopPrice, writer.uint32(90).fork()).join();
    }
    if (message.instrumentUid !== "") {
      writer.uint32(98).string(message.instrumentUid);
    }
    if (message.takeProfitType !== 0) {
      writer.uint32(104).int32(message.takeProfitType);
    }
    if (message.trailingData !== undefined) {
      StopOrder_TrailingData.encode(message.trailingData, writer.uint32(114).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(120).int32(message.status);
    }
    if (message.exchangeOrderType !== 0) {
      writer.uint32(128).int32(message.exchangeOrderType);
    }
    if (message.exchangeOrderId !== undefined) {
      writer.uint32(138).string(message.exchangeOrderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stopOrderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lotsRequested = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.figi = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.orderType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.activationDateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.price = MoneyValue.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.stopPrice = MoneyValue.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.instrumentUid = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.takeProfitType = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.trailingData = StopOrder_TrailingData.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.exchangeOrderType = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.exchangeOrderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StopOrder>): StopOrder {
    return StopOrder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopOrder>): StopOrder {
    const message = createBaseStopOrder();
    message.stopOrderId = object.stopOrderId ?? "";
    message.lotsRequested = object.lotsRequested ?? 0;
    message.figi = object.figi ?? "";
    message.direction = object.direction ?? 0;
    message.currency = object.currency ?? "";
    message.orderType = object.orderType ?? 0;
    message.createDate = object.createDate ?? undefined;
    message.activationDateTime = object.activationDateTime ?? undefined;
    message.expirationTime = object.expirationTime ?? undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? MoneyValue.fromPartial(object.price)
      : undefined;
    message.stopPrice = (object.stopPrice !== undefined && object.stopPrice !== null)
      ? MoneyValue.fromPartial(object.stopPrice)
      : undefined;
    message.instrumentUid = object.instrumentUid ?? "";
    message.takeProfitType = object.takeProfitType ?? 0;
    message.trailingData = (object.trailingData !== undefined && object.trailingData !== null)
      ? StopOrder_TrailingData.fromPartial(object.trailingData)
      : undefined;
    message.status = object.status ?? 0;
    message.exchangeOrderType = object.exchangeOrderType ?? 0;
    message.exchangeOrderId = object.exchangeOrderId ?? undefined;
    return message;
  },
};

function createBaseStopOrder_TrailingData(): StopOrder_TrailingData {
  return {
    indent: undefined,
    indentType: 0,
    spread: undefined,
    spreadType: 0,
    status: 0,
    price: undefined,
    extr: undefined,
  };
}

export const StopOrder_TrailingData: MessageFns<StopOrder_TrailingData> = {
  encode(message: StopOrder_TrailingData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.indent !== undefined) {
      Quotation.encode(message.indent, writer.uint32(10).fork()).join();
    }
    if (message.indentType !== 0) {
      writer.uint32(16).int32(message.indentType);
    }
    if (message.spread !== undefined) {
      Quotation.encode(message.spread, writer.uint32(26).fork()).join();
    }
    if (message.spreadType !== 0) {
      writer.uint32(32).int32(message.spreadType);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.price !== undefined) {
      Quotation.encode(message.price, writer.uint32(58).fork()).join();
    }
    if (message.extr !== undefined) {
      Quotation.encode(message.extr, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopOrder_TrailingData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopOrder_TrailingData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.indent = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.indentType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.spread = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.spreadType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.price = Quotation.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.extr = Quotation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StopOrder_TrailingData>): StopOrder_TrailingData {
    return StopOrder_TrailingData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopOrder_TrailingData>): StopOrder_TrailingData {
    const message = createBaseStopOrder_TrailingData();
    message.indent = (object.indent !== undefined && object.indent !== null)
      ? Quotation.fromPartial(object.indent)
      : undefined;
    message.indentType = object.indentType ?? 0;
    message.spread = (object.spread !== undefined && object.spread !== null)
      ? Quotation.fromPartial(object.spread)
      : undefined;
    message.spreadType = object.spreadType ?? 0;
    message.status = object.status ?? 0;
    message.price = (object.price !== undefined && object.price !== null)
      ? Quotation.fromPartial(object.price)
      : undefined;
    message.extr = (object.extr !== undefined && object.extr !== null) ? Quotation.fromPartial(object.extr) : undefined;
    return message;
  },
};

/** Сервис для работы со стоп-заявками: выставление, отмена, получение списка стоп-заявок. */
export type StopOrdersServiceDefinition = typeof StopOrdersServiceDefinition;
export const StopOrdersServiceDefinition = {
  name: "StopOrdersService",
  fullName: "tinkoff.public.invest.api.contract.v1.StopOrdersService",
  methods: {
    /** Выставить стоп-заявку. */
    postStopOrder: {
      name: "PostStopOrder",
      requestType: PostStopOrderRequest,
      requestStream: false,
      responseType: PostStopOrderResponse,
      responseStream: false,
      options: {},
    },
    /** Получить список активных стоп-заявок по счёту. */
    getStopOrders: {
      name: "GetStopOrders",
      requestType: GetStopOrdersRequest,
      requestStream: false,
      responseType: GetStopOrdersResponse,
      responseStream: false,
      options: {},
    },
    /** Отменить стоп-заявку. */
    cancelStopOrder: {
      name: "CancelStopOrder",
      requestType: CancelStopOrderRequest,
      requestStream: false,
      responseType: CancelStopOrderResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface StopOrdersServiceImplementation<CallContextExt = {}> {
  /** Выставить стоп-заявку. */
  postStopOrder(
    request: PostStopOrderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PostStopOrderResponse>>;
  /** Получить список активных стоп-заявок по счёту. */
  getStopOrders(
    request: GetStopOrdersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetStopOrdersResponse>>;
  /** Отменить стоп-заявку. */
  cancelStopOrder(
    request: CancelStopOrderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CancelStopOrderResponse>>;
}

export interface StopOrdersServiceClient<CallOptionsExt = {}> {
  /** Выставить стоп-заявку. */
  postStopOrder(
    request: DeepPartial<PostStopOrderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PostStopOrderResponse>;
  /** Получить список активных стоп-заявок по счёту. */
  getStopOrders(
    request: DeepPartial<GetStopOrdersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetStopOrdersResponse>;
  /** Отменить стоп-заявку. */
  cancelStopOrder(
    request: DeepPartial<CancelStopOrderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CancelStopOrderResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
